name: CI test

on:
  push:
    branches: [dev, feat/* ]

  pull_request:
    branches:
      - dev

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: checkout # github action에 보이는 이름
        uses: actions/checkout@v4 # action의 checkout을 v4버전으로 실행한다.

      - name: java setup
        uses: actions/setup-java@v2 # action에서 java환경을 setup한다.
        with:
          distribution: 'temurin' # AdoptOpenJDK를 명시한다. 이외에 corretto, oracle 등이 있다.
          java-version: '17' # java 버전

      - name: make executable gradlew
        run: chmod +x ./gradlew # chmod를 리눅스에서 동작 시켜서 ./gradlew 파일의 권한을 읽을수 있도록 한다.

      - name: Build with Gradle
        run: ./gradlew build #-x test # build 후 테스트 수행하게 된다. -x test 를 사용해서 테스트는 진행하지 않도록 설정

      - name: Build Spring Boot Jar
        run: ./gradlew bootJar # 실행 가능한 jar 파일을 만든다.
        
      - name: Build Docker image # jar 파일을 복사에서 Dockerfile에 넣는다.
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME_TEST }}/cicdtest:1.0 .

      - name: Login to DockerHub # docker hub에 로그인 한다. github에 저장된 DOCKERHUB_USERNAME, DOCKERHUB_TOKEN 사용
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_TEST }}
          password: ${{ secrets.DOCKERHUB_TOKEN_TEST }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME_TEST }}/cicdtest:1.0 # docker에 image push

  run-docker-image-on-ec2:
    # build-docker-image 작업이 완료되어야 실행됨
    needs: build-and-push-docker

    # self-hosted-runner에서 동작
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지 Pull
      - name: docker pull
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME_TEST }}/cicdtest:1.0

      # 2. 기존 컨테이너 중지
      - name: docker stop container

        run: docker stop $(docker ps -q) 2>/dev/null || true

      # 3. 최신 이미지 컨테이너화하여 실행시
      - name: docker run new container
        run: docker run --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME_TEST }}/cicdtest:1.0

      # 4. 기존 이미지 정리
      - name: delete old docker image
        run: docker system prune -f
